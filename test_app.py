import osimport jsonimport unittestfrom flask_sqlalchemy import SQLAlchemyfrom app import create_appfrom models import setup_db, Event, Creatorfrom dotenv import load_dotenvAPP_ROOT = os.path.join(os.path.dirname(__file__))dotenv_path = os.path.join(APP_ROOT, '.env')load_dotenv(dotenv_path)class EventsManagerCase(unittest.TestCase):    """This class represents the trivia test case"""    def setUp(self):        """Define test variables and initialize app."""        self.app = create_app()        self.client = self.app.test_client        self.database_path = os.getenv("TEST_DATABASE_URL")        setup_db(self.app, self.database_path)        self.creator = {                "age": "28",                "email": "creator@email.com",                "gender": "mail",                "id": 5,                "oauth": "5ea5b234c146234234242ee",                "phone": "0987892323"            }        self.event_creator = {            "category": "ambigold",            "date": "4/01/2022",            "img": "https://images.unsplas1510743006598-4845616e044f?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=500&q=60",            "title": "New classics",            "creator_id": "2"        }        self.event_creator_patch_6 = {            "category": "fun",            "title": "Not a fun event",            "creator_id": "1"        }        self.event_admin = {            "category": "fun",            "date": "4/01/2027",            "img": "https://images.unsplsdto-151074yMDd9&auto=format&fit=crop&w=500&q=60",            "title": "Fun day outids",            "creator_id": "2"        }        # binds the app to the current context        with self.app.app_context():            self.db = SQLAlchemy()            self.db.init_app(self.app)            self.db.create_all() # create all tables    def tearDown(self):        """Executed after reach test"""        pass    def test_get_events(self):        res = self.client().get('/events')        data = json.loads(res.data)        self.assertEqual(res.status_code, 200)        self.assertEqual(data['success'], True)        self.assertTrue(data['total_events'])    def test_404_get_events_fail_on_incorrect_params(self):        res = self.client().get('/event/')        data = json.loads(res.data)        self.assertEqual(res.status_code, 404)        self.assertEqual(data['success'], False)        self.assertEqual(data['message'], 'Resource not found')    # authenticated endpoints for CRUD creator    def test_get_creator_by_creator(self):        oauth_test_user_token = os.getenv('OAUTH_TEST_CREATOR_USER_TOKEN')        headers = {'Authorization': 'Bearer {}'.format(oauth_test_user_token)}        res = self.client().get('/creators', headers=headers)        data = json.loads(res.data)        self.assertEqual(res.status_code, 200)        self.assertEqual(data['success'], True)    def test_401_post_creator_by_creator_fails(self):        oauth_test_user_token = os.getenv('OAUTH_TEST_CREATOR_USER_TOKEN')        headers = {'Authorization': 'Bearer {}'.format(oauth_test_user_token)}        res = self.client().post('/creators', headers=headers, json=self.creator)        data = json.loads(res.data)        self.assertEqual(res.status_code, 401)        self.assertEqual(data['success'], False)    def test_401_patch_creator_by_creator_fails(self):        oauth_test_user_token = os.getenv('OAUTH_TEST_CREATOR_USER_TOKEN')        headers = {'Authorization': 'Bearer {}'.format(oauth_test_user_token)}        res = self.client().patch('/creators/1', headers=headers)        data = json.loads(res.data)        self.assertEqual(res.status_code, 401)        self.assertEqual(data['success'], False)    def test_404_patch_creator_by_creator_fails_as_id_not_provided(self):        oauth_test_user_token = os.getenv('OAUTH_TEST_CREATOR_USER_TOKEN')        headers = {'Authorization': 'Bearer {}'.format(oauth_test_user_token)}        res = self.client().patch('/creator/', headers=headers, json={'email':'aemail'})        data = json.loads(res.data)        self.assertEqual(res.status_code, 404)        self.assertEqual(data['success'], False)    def test_get_events_detail_by_creator_by(self):        oauth_test_user_token = os.getenv('OAUTH_TEST_CREATOR_USER_TOKEN')        headers = {'Authorization': 'Bearer {}'.format(oauth_test_user_token)}        res = self.client().get('/events-detail', headers=headers)        data = json.loads(res.data)        self.assertEqual(res.status_code, 200)        self.assertEqual(data['success'], True)    def test_patch_event_by_creator(self):        oauth_test_user_token = os.getenv('OAUTH_TEST_CREATOR_USER_TOKEN')        headers = {'Authorization': 'Bearer {}'.format(oauth_test_user_token)}        res = self.client().patch('/events/6', headers=headers, json=self.event_creator_patch_6)        data = json.loads(res.data)        self.assertEqual(res.status_code, 200)        self.assertEqual(data['success'], True)    def test_401_delete_event_fails_by_creator(self):        oauth_test_user_token = os.getenv('OAUTH_TEST_CREATOR_USER_TOKEN')        headers = {'Authorization': 'Bearer {}'.format(oauth_test_user_token)}        res = self.client().delete('/events/6', headers=headers)        data = json.loads(res.data)        self.assertEqual(res.status_code, 401)        self.assertEqual(data['success'], False)    def test_get_creator_by_admin_creator(self):        oauth_test_user_token = os.getenv('OAUTH_TEST_ADMIN_CREATOR_USER_TOKEN')        headers = {'Authorization': 'Bearer {}'.format(oauth_test_user_token)}        res = self.client().get('/creators', headers=headers)        data = json.loads(res.data)        self.assertEqual(res.status_code, 200)        self.assertEqual(data['success'], True)    def test_post_creator_by_admin_creator(self):        oauth_test_user_token = os.getenv('OAUTH_TEST_ADMIN_CREATOR_USER_TOKEN')        headers = {'Authorization': 'Bearer {}'.format(oauth_test_user_token)}        res = self.client().post('/creators', headers=headers, json=self.creator)        data = json.loads(res.data)        self.assertEqual(res.status_code, 200)        self.assertEqual(data['success'], True)    def test_patch_creator_by_admin_creator(self):        oauth_test_user_token = os.getenv('OAUTH_TEST_ADMIN_CREATOR_USER_TOKEN')        headers = {'Authorization': 'Bearer {}'.format(oauth_test_user_token)}        res = self.client().patch('/creators/1', headers=headers, json={'email':'new@email.com'})        data = json.loads(res.data)        self.assertEqual(res.status_code, 200)        self.assertEqual(data['success'], True)    def test_delete_event_by_admin_creator(self):        oauth_test_user_token = os.getenv('OAUTH_TEST_ADMIN_CREATOR_USER_TOKEN')        headers = {'Authorization': 'Bearer {}'.format(oauth_test_user_token)}        res = self.client().delete('/events/7', headers=headers)        data = json.loads(res.data)        self.assertEqual(res.status_code, 200)        self.assertEqual(data['success'], True)    def test_get_events_detail_by_admin_creator_by(self):        oauth_test_user_token = os.getenv('OAUTH_TEST_ADMIN_CREATOR_USER_TOKEN')        headers = {'Authorization': 'Bearer {}'.format(oauth_test_user_token)}        res = self.client().get('/events-detail', headers=headers)        data = json.loads(res.data)        self.assertEqual(res.status_code, 200)        self.assertEqual(data['success'], True)    def test_post_event_by_admin_creator(self):        oauth_test_user_token = os.getenv('OAUTH_TEST_ADMIN_CREATOR_USER_TOKEN')        headers = {'Authorization': 'Bearer {}'.format(oauth_test_user_token)}        res = self.client().post('/events', headers=headers, json=self.event_admin)        data = json.loads(res.data)        self.assertEqual(res.status_code, 200)        self.assertEqual(data['success'], True)    def test_patch_event_by_admin_creator(self):        oauth_test_user_token = os.getenv('OAUTH_TEST_ADMIN_CREATOR_USER_TOKEN')        headers = {'Authorization': 'Bearer {}'.format(oauth_test_user_token)}        res = self.client().patch('/events/6', headers=headers, json=self.event_creator_patch_6)        data = json.loads(res.data)        self.assertEqual(res.status_code, 200)        self.assertEqual(data['success'], True)    def test_422_patch_event_not_found_by_admin_creator(self):        oauth_test_user_token = os.getenv('OAUTH_TEST_ADMIN_CREATOR_USER_TOKEN')        headers = {'Authorization': 'Bearer {}'.format(oauth_test_user_token)}        res = self.client().patch('/events/233', headers=headers, json=self.event_creator_patch_6)        data = json.loads(res.data)        self.assertEqual(res.status_code, 422)        self.assertEqual(data['success'], False)    def test_get_event_by_creator(self):        oauth_test_user_token = os.getenv('OAUTH_TEST_CREATOR_USER_TOKEN')        headers = {'Authorization': 'Bearer {}'.format(oauth_test_user_token)}        res = self.client().get('/creatorEvents/1', headers=headers)        data = json.loads(res.data)        self.assertEqual(res.status_code, 200)        self.assertEqual(data['success'], True)    def test_404_event_by_creator_not_found_by_admin_creator(self):        oauth_test_user_token = os.getenv('OAUTH_TEST_ADMIN_CREATOR_USER_TOKEN')        headers = {'Authorization': 'Bearer {}'.format(oauth_test_user_token)}        res = self.client().get('/creatorEvents/89', headers=headers)        data = json.loads(res.data)        self.assertEqual(res.status_code, 404)        self.assertEqual(data['success'], False)# Make the tests conveniently executableif __name__ == "__main__":    unittest.main()