import osfrom sqlalchemy import Column, String, Integer,DateTime, create_enginefrom flask_sqlalchemy import SQLAlchemyfrom dotenv import load_dotenvdb = SQLAlchemy()# load env variablesAPP_ROOT = os.path.join(os.path.dirname(__file__))dotenv_path = os.path.join(APP_ROOT, '.env')load_dotenv(dotenv_path)db_path = os.getenv("DATABASE_URL")def setup_db(app, database_path=db_path):    app.config["SQLALCHEMY_DATABASE_URI"] = database_path    app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False    db.app = app    db.init_app(app)    db.create_all()class Creator(db.Model):    """    Creator model to hold app users    All app users are called creators.    Admin users are creators with elevated access.    Auth: Permissions and Roles are handled via the OAuth service.    We maintain this model to link creators to specific events and for stats and reporting    """    __tablename__ = 'creator'    id = Column(Integer, primary_key=True)    oauth = Column(String, unique=True)    email = Column(String)    gender = Column(String)    age = Column(String)    phone = Column(String)    events = db.relationship('Event', backref=db.backref('creator', lazy=True))    def insert(self):        db.session.add(self)        db.session.commit()    def update(self):        db.session.commit()    def delete(self):        db.session.delete(self)        db.session.commit()    def format(self):        return {            'id': self.id,            'oauth': self.oauth,            'email': self.email,            'gender': self.gender,            'age': self.age,            'phone': self.phone,        }    def format_short(self):        return {            'id': self.id,            'oauth': self.oauth,            'email': self.email,        }class Event(db.Model):    """    Event model to store all event data    Includes foreign key relation to creator.    """    __tablename__ = 'event'    id = Column(Integer, primary_key=True)    title = Column(String)    date = Column(DateTime)    category = Column(String)    img = Column(String)    creator_id = db.Column(db.Integer, db.ForeignKey(Creator.id), nullable=False)    def insert(self):        db.session.add(self)        db.session.commit()    def update(self):        db.session.commit()    def delete(self):        db.session.delete(self)        db.session.commit()    def format(self):        return {            'id': self.id,            'title': self.title,            'date': self.date,            'category': self.category,            'img': self.img,        }    def detail_format(self):        return {            'id': self.id,            'title': self.title,            'date': self.date,            'category': self.category,            'img': self.img,            'creator': self.creator.format_short(),        }